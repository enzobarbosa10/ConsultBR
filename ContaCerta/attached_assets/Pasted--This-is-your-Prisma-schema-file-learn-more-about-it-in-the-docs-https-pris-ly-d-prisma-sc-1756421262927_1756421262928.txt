// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ENTREPRENEUR
  CONSULTANT
  ADMIN
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum ProposalStatus {
  SENT
  VIEWED
  ACCEPTED
  DECLINED
  COUNTER_OFFERED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
}

enum TransactionType {
  PROJECT_PAYMENT
  SUBSCRIPTION
  REFUND
  COMMISSION
}

enum SubscriptionPlan {
  FREE
  ENTREPRENEUR_PRO
  CONSULTANT_EXPERT
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum EventType {
  WEBINAR
  WORKSHOP
  NETWORKING
  MASTERCLASS
}

enum NotificationType {
  MESSAGE
  PROPOSAL
  PROJECT_UPDATE
  PAYMENT
  SYSTEM
  MARKETING
}

// Core User Models
model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  role              UserRole
  status            UserStatus         @default(PENDING_VERIFICATION)
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  emailVerified     Boolean            @default(false)
  phoneVerified     Boolean            @default(false)
  twoFactorEnabled  Boolean            @default(false)
  lastLogin         DateTime?
  loginCount        Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Profile relationships
  entrepreneurProfile EntrepreneurProfile?
  consultantProfile   ConsultantProfile?
  
  // Activity relationships
  sentMessages        Message[]          @relation("MessageSender")
  receivedMessages    Message[]          @relation("MessageReceiver")
  sentProposals       Proposal[]         @relation("ProposalSender")
  receivedProposals   Proposal[]         @relation("ProposalReceiver")
  givenReviews        Review[]           @relation("ReviewGiver")
  receivedReviews     Review[]           @relation("ReviewReceiver")
  transactions        Transaction[]
  notifications       Notification[]
  favorites           Favorite[]
  reportsMade         Report[]           @relation("ReportMade")
  reportsReceived     Report[]           @relation("ReportReceived")
  eventRegistrations  EventRegistration[]
  forumPosts          ForumPost[]
  forumComments       ForumComment[]
  subscriptions       Subscription[]

  @@map("users")
}

model EntrepreneurProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyName       String
  companyDescription String?
  industry          String
  foundedAt         DateTime?
  employeeCount     Int?
  monthlyRevenue    Decimal?  @db.Decimal(12,2)
  website           String?
  linkedin          String?
  instagram         String?
  
  businessStage     String    // "idea", "prototype", "launch", "growth"
  pitchDeckUrl      String?
  businessPlanUrl   String?
  
  // Location
  country           String    @default("Brasil")
  state             String
  city              String
  isRemote          Boolean   @default(false)
  
  // Consultation preferences
  budget            Decimal?  @db.Decimal(10,2)
  urgencyLevel      String?   // "low", "medium", "high"
  consultationAreas String[]  // ["marketing", "finance", "strategy"]
  
  // Metrics
  totalProjects     Int       @default(0)
  averageRating     Decimal?  @db.Decimal(3,2)
  totalSpent        Decimal   @default(0) @db.Decimal(12,2)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  projects          Project[]

  @@map("entrepreneur_profiles")
}

model ConsultantProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title             String
  bio               String
  experience        Int       // years
  hourlyRate        Decimal?  @db.Decimal(8,2)
  projectRate       Decimal?  @db.Decimal(10,2)
  
  // Professional info
  education         Json[]    // [{"degree": "MBA", "institution": "FGV", "year": 2015}]
  certifications    Json[]    // [{"name": "PMP", "issuer": "PMI", "year": 2020}]
  languages         String[]  @default(["portuguÃªs"])
  
  // Location and availability
  country           String    @default("Brasil")
  state             String
  city              String
  timezone          String    @default("America/Sao_Paulo")
  isRemote          Boolean   @default(true)
  availability      Json?     // Weekly schedule
  
  // Specializations
  specializations   Specialization[]
  industries        String[]  // ["technology", "retail", "healthcare"]
  
  // Portfolio
  portfolioItems    PortfolioItem[]
  
  // Verification
  isVerified        Boolean   @default(false)
  verifiedAt        DateTime?
  documentsUrl      String[]
  
  // Metrics
  totalProjects     Int       @default(0)
  averageRating     Decimal?  @db.Decimal(3,2)
  totalEarnings     Decimal   @default(0) @db.Decimal(12,2)
  responseTime      Int?      // in hours
  profileViews      Int       @default(0)
  
  // Settings
  acceptingClients  Boolean   @default(true)
  instantBooking    Boolean   @default(false)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  projects          Project[]

  @@map("consultant_profiles")
}

model Specialization {
  id           String  @id @default(cuid())
  name         String  @unique
  description  String?
  category     String  // "marketing", "finance", "strategy", etc.
  isActive     Boolean @default(true)
  
  consultants  ConsultantProfile[]
  projects     Project[]

  @@map("specializations")
}

model PortfolioItem {
  id            String            @id @default(cuid())
  consultantId  String
  consultant    ConsultantProfile @relation(fields: [consultantId], references: [id], onDelete: Cascade)
  
  title         String
  description   String
  industry      String?
  duration      String?           // "3 months", "1 week"
  results       String?
  imageUrl      String?
  caseStudyUrl  String?
  clientName    String?           // Can be anonymized
  testimonial   String?
  
  tags          String[]
  
  isPublic      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("portfolio_items")
}

// Project and Proposal Models
model Project {
  id              String      @id @default(cuid())
  entrepreneurId  String
  consultantId    String?
  entrepreneur    EntrepreneurProfile @relation(fields: [entrepreneurId], references: [id])
  consultant      ConsultantProfile?  @relation(fields: [consultantId], references: [id])
  
  title           String
  description     String
  requirements    String?
  deliverables    String[]
  
  specializations Specialization[]
  budget          Decimal?    @db.Decimal(10,2)
  estimatedHours  Int?
  
  status          ProjectStatus @default(DRAFT)
  startDate       DateTime?
  endDate         DateTime?
  completedAt     DateTime?
  
  attachments     String[]    // File URLs
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  proposals       Proposal[]
  milestones      Milestone[]
  messages        Message[]
  reviews         Review[]
  transactions    Transaction[]

  @@map("projects")
}

model Proposal {
  id           String         @id @default(cuid())
  projectId    String
  senderId     String
  receiverId   String
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender       User           @relation("ProposalSender", fields: [senderId], references: [id])
  receiver     User           @relation("ProposalReceiver", fields: [receiverId], references: [id])
  
  message      String
  proposedRate Decimal        @db.Decimal(10,2)
  estimatedHours Int?
  deliveryDate DateTime?
  
  status       ProposalStatus @default(SENT)
  
  // Counter offer tracking
  parentId     String?
  parent       Proposal?      @relation("ProposalCounters", fields: [parentId], references: [id])
  counters     Proposal[]     @relation("ProposalCounters")
  
  viewedAt     DateTime?
  respondedAt  DateTime?
  expiresAt    DateTime?
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("proposals")
}

model Milestone {
  id          String    @id @default(cuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  amount      Decimal   @db.Decimal(10,2)
  dueDate     DateTime?
  
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("milestones")
}

// Communication Models
model Message {
  id         String   @id @default(cuid())
  projectId  String?
  senderId   String
  receiverId String
  project    Project? @relation(fields: [projectId], references: [id])
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  content    String
  attachments String[]
  
  isRead     Boolean  @default(false)
  readAt     DateTime?
  
  // Threading
  parentId   String?
  parent     Message? @relation("MessageThread", fields: [parentId], references: [id])
  replies    Message[] @relation("MessageThread")
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data for the notification
  
  isRead    Boolean          @default(false)
  readAt    DateTime?
  
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Review and Rating Models
model Review {
  id          String  @id @default(cuid())
  projectId   String
  giverId     String
  receiverId  String
  project     Project @relation(fields: [projectId], references: [id])
  giver       User    @relation("ReviewGiver", fields: [giverId], references: [id])
  receiver    User    @relation("ReviewReceiver", fields: [receiverId], references: [id])
  
  rating      Int     // 1-5 stars
  comment     String?
  
  // Detailed ratings
  communication Int?
  quality       Int?
  timeline      Int?
  value         Int?
  
  isPublic    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([projectId, giverId])
  @@map("reviews")
}

// Payment and Transaction Models
model Transaction {
  id            String          @id @default(cuid())
  userId        String
  projectId     String?
  user          User            @relation(fields: [userId], references: [id])
  project       Project?        @relation(fields: [projectId], references: [id])
  
  type          TransactionType
  amount        Decimal         @db.Decimal(12,2)
  fee           Decimal         @db.Decimal(12,2) @default(0)
  netAmount     Decimal         @db.Decimal(12,2)
  
  status        PaymentStatus   @default(PENDING)
  
  // Payment provider data
  providerId    String?         // Stripe, PagarMe ID
  providerData  Json?
  
  // Metadata
  description   String?
  metadata      Json?
  
  processedAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("transactions")
}

// Subscription Models
model Subscription {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  plan            SubscriptionPlan
  status          SubscriptionStatus
  
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  
  // Billing
  amount          Decimal            @db.Decimal(8,2)
  currency        String             @default("BRL")
  interval        String             // "month", "year"
  
  // Provider data
  providerId      String?
  providerData    Json?
  
  cancelledAt     DateTime?
  cancelReason    String?
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("subscriptions")
}

// Community and Content Models
model ForumCategory {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  slug        String      @unique
  color       String?
  icon        String?
  
  isActive    Boolean     @default(true)
  postCount   Int         @default(0)
  
  posts       ForumPost[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("forum_categories")
}

model ForumPost {
  id          String         @id @default(cuid())
  categoryId  String
  authorId    String
  category    ForumCategory  @relation(fields: [categoryId], references: [id])
  author      User           @relation(fields: [authorId], references: [id])
  
  title       String
  content     String
  slug        String         @unique
  
  isPinned    Boolean        @default(false)
  isLocked    Boolean        @default(false)
  
  viewCount   Int            @default(0)
  likeCount   Int            @default(0)
  
  comments    ForumComment[]
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("forum_posts")
}

model ForumComment {
  id        String    @id @default(cuid())
  postId    String
  authorId  String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id])
  
  content   String
  
  // Threading
  parentId  String?
  parent    ForumComment? @relation("CommentThread", fields: [parentId], references: [id])
  replies   ForumComment[] @relation("CommentThread")
  
  likeCount Int       @default(0)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("forum_comments")
}

model Event {
  id            String              @id @default(cuid())
  title         String
  description   String
  content       String?
  
  type          EventType
  isOnline      Boolean             @default(true)
  isPaid        Boolean             @default(false)
  price         Decimal?            @db.Decimal(8,2)
  
  startDate     DateTime
  endDate       DateTime
  timezone      String              @default("America/Sao_Paulo")
  
  location      String?
  meetingUrl    String?
  
  maxAttendees  Int?
  
  imageUrl      String?
  tags          String[]
  
  isPublished   Boolean             @default(false)
  publishedAt   DateTime?
  
  registrations EventRegistration[]
  
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@map("events")
}

model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  attended  Boolean? @default(false)
  
  createdAt DateTime @default(now())

  @@unique([eventId, userId])
  @@map("event_registrations")
}

// Utility Models
model Favorite {
  id          String   @id @default(cuid())
  userId      String
  targetId    String   // Can be consultant, project, etc.
  targetType  String   // "consultant", "project"
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())

  @@unique([userId, targetId, targetType])
  @@map("favorites")
}

model Report {
  id          String   @id @default(cuid())
  reporterId  String
  reportedId  String
  reporter    User     @relation("ReportMade", fields: [reporterId], references: [id])
  reported    User     @relation("ReportReceived", fields: [reportedId], references: [id])
  
  reason      String
  description String?
  
  status      String   @default("pending") // "pending", "reviewed", "resolved", "dismissed"
  
  reviewedBy  String?
  reviewedAt  DateTime?
  resolution  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // "string", "number", "boolean", "json"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}